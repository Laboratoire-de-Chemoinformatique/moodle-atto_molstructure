--- ChemDoodleWeb-9.4.0/src/ChemDoodleWeb-unpacked.js	2022-01-02 14:33:42.000000000 +0100
+++ ChemDoodleWeb-unpacked.js	2023-09-14 10:43:34.869372506 +0200
@@ -25230,7 +25230,7 @@
 		
 		return molecule;
 	};
-	_.write = function(molecule) {
+	_.write = function(molecule, shapes) {
 		let sb = [];
 		sb.push('Molecule from ChemDoodle Web Components\n\nhttp://www.ichemlabs.com\n');
 		sb.push(this.fit(molecule.atoms.length.toString(), 3));
@@ -25271,6 +25271,23 @@
 						break;
 					}
 				}
+
+
+				// Unistra dev.
+				let k = 0;
+				let atommapp = 0;
+
+				if (typeof shapes !== 'undefined') {
+					for ( let j = 0, jj = shapes.length; j < jj; j++) {
+						if (shapes[j] instanceof structures.d2.AtomMapping) {
+							k++;
+							if (a === shapes[j].o1 || a === shapes[j].o2) {
+								atommapp = k;
+							}
+						}
+					}
+				}
+
 				sb.push(this.fit(((a.x - p.x) / c.DEFAULT_STYLES.bondLength_2D).toFixed(4), 10));
 				sb.push(this.fit((-(a.y - p.y) / c.DEFAULT_STYLES.bondLength_2D).toFixed(4), 10));
 				sb.push(this.fit((a.z / c.DEFAULT_STYLES.bondLength_2D).toFixed(4), 10));
@@ -25278,7 +25295,10 @@
 				sb.push(this.fit(a.label, 3, true));
 				sb.push(mass);
 				sb.push(charge);
-				sb.push('  0  0  0  0\n');
+				sb.push('  0  0  0  0  0  0  0');
+				sb.push(this.fit((atommapp).toString(), 3));
+				sb.push('  0  0\n');
+				// End Unistra dev.
 			}
 			for ( let i = 0, ii = molecule.bonds.length; i < ii; i++) {
 				let b = molecule.bonds[i];
@@ -25446,8 +25466,8 @@
 	c.readMOL = function(content, multiplier) {
 		return interpreter2.read(content, multiplier);
 	};
-	c.writeMOL = function(mol) {
-		return interpreter2.write(mol);
+	c.writeMOL = function(mol, shapes) {
+		return interpreter2.write(mol, shapes);
 	};
 	let interpreter3 = new io.MOLInterpreter();
 	interpreter3.version = 3;
@@ -26791,12 +26811,12 @@
 		sb.push('\n');
 		for ( let j = 0, jj = reaction.reactants.length; j < jj; j++) {
 			sb.push('$MOL\n');
-			sb.push(c.writeMOL(reaction.reactants[j]));
+			sb.push(c.writeMOL(reaction.reactants[j], shapes));
 			sb.push('\n');
 		}
 		for ( let j = 0, jj = reaction.products.length; j < jj; j++) {
 			sb.push('$MOL\n');
-			sb.push(c.writeMOL(reaction.products[j]));
+			sb.push(c.writeMOL(reaction.products[j], shapes));
 			sb.push('\n');
 		}
 		return sb.join('');
@@ -27982,7 +28002,7 @@
 
 })(ChemDoodle, ChemDoodle.monitor, ChemDoodle.structures, Math, ChemDoodle.lib.mat4);
 
-(function(c, undefined) {
+(function(c, structures, undefined) {
 	'use strict';
 	c.ViewerCanvas = function(id, width, height) {
 		if (id) {
@@ -27990,8 +28010,117 @@
 		}
 	};
 	c.ViewerCanvas.prototype = new c._Canvas();
+	// Unistra dev
+	let _ = c.ViewerCanvas.prototype = new c._Canvas();
+	_.checksOnAction = function(force){
+		// using force improves efficiency, so changes will not be checked
+		// until a render occurs
+		// you can force a check by sending true to this function after
+		// calling check with a false
+		if (force && this.doChecks) {
+			// setup data for atom mappings
+			let arrow;
+			let mappings = [];
+			let brackets = [];
+			let vaps = [];
+			for(let i = 0, ii = this.shapes.length; i<ii; i++){
+				let s = this.shapes[i];
+				if(s instanceof structures.d2.AtomMapping){
+					s.error = false;
+					mappings.push(s);
+				}else if(s instanceof structures.d2.Line && !arrow){
+					// make sure arrow isn't defined, just to make sure we use the first arrow
+					arrow = s;
+				}else if(s instanceof structures.d2.RepeatUnit){
+					s.error = false;
+					brackets.push(s);
+				}else if(s instanceof structures.d2.VAP){
+					s.error = false;
+					vaps.push(s);
+				}
+			}
+			for(let i = 0, ii = mappings.length; i<ii; i++){
+				let si = mappings[i];
+				si.label = (i+1).toString();
+				for(let j = i+1, jj = mappings.length; j<jj; j++){
+					let sj = mappings[j];
+					if(si.o1===sj.o1 || si.o2===sj.o1 || si.o1===sj.o2 || si.o2===sj.o2){
+						si.error = true;
+						sj.error = true;
+					}
+				}
+				// different labels
+				if(!si.error && si.o1.label !== si.o2.label){
+					si.error = true;
+				}
+				// same structure
+				if(!si.error && this.getMoleculeByAtom(si.o1) === this.getMoleculeByAtom(si.o2)){
+					si.error = true;
+				}
+			}
+			if(brackets.length!==0){
+				let allAs = this.getAllAtoms();
+				for(let i = 0, ii = allAs.length; i<ii; i++){
+					allAs[i].inBracket = false;
+				}
+				for(let i = 0, ii = brackets.length; i<ii; i++){
+					let si = brackets[i];
+					si.setContents(this);
+					if(si.contents.length===0){
+						// user error
+						si.error = true;
+					}else{
+						for(let j = 0, jj = si.contents.length; j<jj; j++){
+							if(si.contents[j].inBracket){
+								si.error = true;
+								break;
+							}
+						}
+					}
+					for(let j = 0, jj = si.contents.length; j<jj; j++){
+						si.contents[j].inBracket = true;
+					}
+				}
+			}
+			for(let i = 0, ii = vaps.length; i<ii; i++){
+				let vap = vaps[i];
+				if(!vap.substituent){
+					// no substituent
+					vap.error = true;
+				}else if(vap.attachments.length===0){
+					// no attachments
+					vap.error = true;
+				}
+				if(!vap.error){
+					// check that all attachments are part of the same molecule
+					let m = this.getMoleculeByAtom(vap.attachments[0]);
+					vap.substituent.present = undefined;
+					for(let j = 0, jj = m.atoms.length; j<jj; j++){
+						m.atoms[j].present = true;
+					}
+					// also make sure the substituent is NOT part of the same molecule
+					if(vap.substituent.present){
+						vap.error = true;
+					}
+					if(!vap.error){
+						for(let j = 0, jj = vap.attachments.length; j<jj; j++){
+							if(!vap.attachments[j].present){
+								vap.error = true;
+								break;
+							}
+						}
+					}
+					for(let j = 0, jj = m.atoms.length; j<jj; j++){
+						m.atoms[j].present = undefined;
+					}
+				}
+			}
+		}
+		this.doChecks = !force;
+	};
 
-})(ChemDoodle);
+})(ChemDoodle, ChemDoodle.structures);
+// End Unistra dev
 
 (function(c, document, undefined) {
 	'use strict';
